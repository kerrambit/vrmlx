#include <string>


std::string simple = R"(

	#VRML V2.0 utf8

	WorldInfo {

	   title "cube.wrl"

	   info "VRML file generated by IVREAD."

	}


)";

std::string two_simple_nodes = R"(

	#VRML V2.0 utf8

	WorldInfo {

	   title "cube.wrl"

	   info "VRML file generated by IVREAD."

	}

    Group {

		geometry [ 58.5 458.02 68.78 ]

		geometry 100.001001       5.55317      -3.05561

    }


)";

std::string node_in_node = R"(

	#VRML V2.0 utf8

    Shape {
		appearance Appearence  {
			ambientIntensity  0.2
		}
	}

)";

std::string quite_deep_recursive_nodes = R"(

	#VRML V2.0 utf8

    Shape {
		appearance Appearence  {
			ambientIntensity  0.2456456
			appearance Appearence {
				lightExposure 42
			}
		}
       geometry [ 58.5 458.02 68.78 ,
                  100.001001 5.55317 -3.05561 ]
	}

    Group {
		bboxCenter 58.7E-3 0.0 15
		bboxSize   -1.0 -1.0 -1.0
	}

)";

std::string group_with_nodes_array = R"(

	#VRML V2.0 utf8

    Group {
		children [

					Group {
                           bboxCenter 58.7E-3 0.0 15
                      },

                    Group {
                           bboxSize   -1.0 -1.0 -1.0
                      }

				 ]
	}

)";

std::string simple_def = R"(

	#VRML V2.0 utf8

    Group {
		children [
					DEF id Group {
                           bboxCenter 58.7E-3 0.0 15
                      }
				 ]
	}

)";

std::string simple_use = R"(

	#VRML V2.0 utf8

    Group {
		children [
					DEF id Group {
                           bboxCenter 58.7E-3 0.0 15
                      }
				 ]
	}

	Group {

		instance USE id 
    }

)";


std::string children_with_both_USE_DEF_and_normal_type_nodes = R"(

	#VRML V2.0 utf8

    Group {
		children [
					DEF id Group {
                           bboxCenter 58.7E-3 0.0 15
                      },
					USE id,
                    Shape {
						appearance Appearence  {
							ambientIntensity  0.2
						}
					}
				 ]
	}

)";

std::string classic = R"(

	#VRML V2.0 utf8

 

  WorldInfo {

    title "cube.wrl"

    info "VRML file generated by IVREAD."

  }

 # comment

  Group {

    children [

      DEF id Group {
                      bboxCenter 58.7E-3 0.0 15
                    },
	  USE id,

      Shape {

        geometry IndexedLineSet {

          coord Coordinate {

           point [ 285.5 434.2858 8.5,
                   284.83615 434.5 8.5,
                   285.5 434.5 8.3120184,
                   283.5 436.35297 7.5,
                   283.28903 436.5 7.5,
                   283.5 436.5 7.3894577,
                   283.5 435.24545 8.5,
                   283.22855 435.5 8.5,
                   283.5 435.5 8.2797327
            ]

          }

          coordIndex [ 2, 0, 1, -1, 5, 3, 4, -1
          ]

        }

      }

    ]

  }


)";

std::string node_with_switch = R"(

	#VRML V2.0 utf8

    Group {
          children [ 
            DEF A1     Switch {
              whichChoice 0
              choice 
                DEF C2  Group { }
               }
                   ]
          }
)";